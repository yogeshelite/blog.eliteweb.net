@model EliteWeb.Models.BlogTable
    @{
        ViewBag.Title = "Edit";
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
    }
    <!DOCTYPE html>
    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>Edit</title>
        <style>
            .tox-statusbar__branding {
                display: none;
            }
        </style>
    </head>
    <body>
        <div class="card card-body">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @*<h4>BlogTable</h4>*@
                    @*<hr />*@
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.id)
                    <div class="form-group">
                        @Html.LabelFor(model => model.Heading, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.EditorFor(model => model.Heading, new { htmlAttributes = new { @class = "form-control", Type = "Text", required = "required" } })
                            @Html.ValidationMessageFor(model => model.Heading, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Blog, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.TextAreaFor(model => model.Blog, new { htmlAttributes = new { @class = "form-control col-md-8", required = "required" } })
                            @Html.ValidationMessageFor(model => model.Blog, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @*<div class="form-group">
                            @Html.LabelFor(model => model.Blog, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.TextAreaFor(Model => Model.Blog)
                        </div>*@
                    <div class="form-row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ShortDiscription, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.ShortDiscription, new { htmlAttributes = new { @class = "form-control", Type = "Text", required = "required" } })
                                    @Html.ValidationMessageFor(model => model.ShortDiscription, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @Type = "Date", @Value = Model.Date.ToString("yyyy-MM-dd"), required = "required" } })
                                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <lable for="FeaturedImage">Featured Image</lable>
                                <div class="col-md-12">
                                    <input type="file" id="image" class="form-control" accept="image/png, image/jpeg" />
                                    @Html.HiddenFor(model => model.FeaturedImage, new { @id = "modelimage" })
                                    @Html.ValidationMessageFor(model => model.FeaturedImage, "", new { @class = "text-danger", required = "required" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-4", required = "required" })
                                <div class="col-md-12">
                                    @Html.DropDownListFor(model => model.Category,
                                                        new SelectList(Enum.GetValues(typeof(Category))),
                                                        "Select Category",new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <lable for="FeaturedImagePreview">Featured Image Preview</lable>
                            @{
                                var imagestring = "data:image/png;base64," + ViewBag.Featuredimage;
                            }
                            <div id="imagePreview" style="border:outset;height:100%">

                                <img src=@imagestring style='width:100%;height: auto;' />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </div>
        <script src="https://cdn.tiny.cloud/1/qagffr3pkuv17a8on1afax661irst1hbr4e6tbv888sz91jc/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
        <script type="text/javascript">
            tinymce.init({
                selector: 'textarea',
                content_css: '//www.tiny.cloud/css/codepen.min.css',
                plugins: 'image code',
                placeholder: 'Blog Description is required.',
                toolbar1: 'insertfile undo redo|styleselect| bold italic| forecolor backcolor|alignleft aligncenter alignright alignjustify|bullist numlist outdent indent|link image code ',
                //toolbar2: 'print preview media| forecolor backcolor emoticons',
                /* enable title field in the Image dialog*/
                image_title: true,
                /* enable automatic uploads of images represented by blob or data URIs*/
                automatic_uploads: true,
                file_picker_types: 'image',
                /* and here's our custom image picker*/
                file_picker_callback: function (cb, value, meta) {
                    var input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    input.setAttribute('accept', 'image/*');

                    input.onchange = function () {
                        var file = this.files[0];

                        var reader = new FileReader();
                        reader.onload = function () {
                            var id = 'blobid' + (new Date()).getTime();
                            var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                            var base64 = reader.result.split(',')[1];
                            var blobInfo = blobCache.create(id, file, base64);
                            blobCache.add(blobInfo);

                            /* call the callback and populate the Title field with the file name */
                            cb(blobInfo.blobUri(), { title: file.name });
                        };
                        reader.readAsDataURL(file);
                    };

                    input.click();
                }
            });
        </script>
        <script type="text/javascript">
            // Be aware! We are handling only the first <input type="file" /> element
            // To avoid errors, it should be placed before this piece of code
            var input = document.querySelector('input[id="image"]');

            // You will receive the Base64 value every time a user selects a file from his device
            // As an example I selected a one-pixel red dot GIF file from my computer
            input.onchange = function () {
                var file = input.files[0],
                    reader = new FileReader();

                reader.onloadend = function () {
                    // Since it contains the Data URI, we should remove the prefix and keep only Base64 string
                    var b64 = reader.result.replace(/^data:.+;base64,/, '');
                    console.log(b64);
                    $("#modelimage").val(b64);
                    $("#imagePreview").html("<img src='data:image/png;base64," + b64 + "' style='width:100%;height: auto;'>");
                };

                reader.readAsDataURL(file);
            };
        </script>
    </body>
</html>